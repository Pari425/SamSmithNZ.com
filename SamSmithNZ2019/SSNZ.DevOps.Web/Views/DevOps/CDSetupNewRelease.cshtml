@using SSNZ.DevOps.Web.Models
@{
    ViewBag.Title = "Tracking progress with work items";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md-12">
        <ul class="breadcrumb">
            <li>@Html.ActionLink("Home", "Index", "Home")</li>
            <li>@Html.ActionLink("DevOps", "Index", "DevOps")</li>
            <li class="active">@ViewBag.Title</li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">
                    @ViewBag.Title
                </h3>
            </div>
            <div class="panel-body">
                @Html.Partial("PartialViews/_DevOpsMenu", new DevOpsMenu2ViewModel(null, null, null, new DevOpsMenuViewModel(false, false, true, false, false, false, false, false), null))
                <hr />

                <span class="DevOpsTFSWarning">Note that this page contains both TFS 2015 and Azure DevOps content. Use the tabs below to show the relevant content</span><br />

                <a name="1" class="anchor"></a>
                <h3>Overview</h3>
                <b>A TFS/Azure DevOps release is the cornerstone of the Continuous Delivery process.</b> A typical release pipeline packages the build from CI and usually deploys to successive Dev, QA and production environments, but can include more as required by each project<br /><br />
                <img src="~/images/DevOps/CD/CDNewRelease.png" class="DevOpsImage" /><br />
                <hr />

                <a name="2" class="anchor"></a>
                <h3>How to setup</h3>
                In the "Release" section, create a new release definition<br />
                <ul class="nav nav-tabs">
                    <li id="tfsli1"><a data-toggle="tab" href="#tfs1">TFS 2015</a></li>
                    <li id="vstsli1" class="active"><a data-toggle="tab" href="#vsts1">Azure DevOps</a></li>
                </ul>
                <div class="tab-content">
                    <div id="tfs1" class="tab-pane fade">
                        <br />
                        In TFS 2015, select an 'Empty' template<br />
                        <img src="~/images/DevOps/CD/CDTFSNewTemplate.png" class="DevOpsImage"><br /><br />

                        In the new definition, enter a new definition name (usually "[app name] Release"). Also link to the build definition to deploy, and rename the "Default environment" to "Dev".<br />
                        <img src="~/images/DevOps/CD/CDNewReleaseWorkflow2.png" class="DevOpsImage" /><br /><br />

                        On the "Configuration" tab, add any variables that apply to the whole project. This is also a great place to add passwords that will remain constant across all environments, such as admin passwords - which can be hidden by clicking the padlock icon on the end of the textbox. <br />
                        <img src="~/images/DevOps/CD/CDNewReleaseWorkflowA.png" class="DevOpsImage" /><br /><br />

                        On the "Triggers" tab, select the "Continuous Deployment" option and select the build to deploy after each check in. <br />
                        <img src="~/images/DevOps/CD/CDNewReleaseWorkflow3.png" class="DevOpsImage" /><br /><br />

                        Finally, in the "Dev" environment, there are a few more items to configure <br />
                        <img src="~/images/DevOps/CD/CDNewReleaseWorkflow4.png" class="DevOpsImage" /><br /><br />
                        <ul>
                            <li>
                                <b>On the "Approval" tab</b>, specify any approvals needed to deploy the environment. On Dev, usually none are needed, with perhaps one on QA, and at least one for production<br /><br />
                                <img src="~/images/DevOps/CD/CDNewReleaseWorkflow5.png" class="DevOpsImage" /><br /><br />
                            </li>
                            <li>
                                <b>On the "Queue" tab</b>, specify the deployment queue to use. Make sure this has "TFS2015BuildPool" on TFS deployments, and "OnPremise" for Azure DevOps deployments<br />
                                <img src="~/images/DevOps/CD/CDNewReleaseWorkflow6.png" class="DevOpsImage" /><br /><br />
                            </li>
                            <li>
                                <b>On the "Variables" tab</b>, specify the configuration for this environment. This is where the connection string, users, passwords and appsettings are set that will vary from environment to environment. As a starting point, setup a dev connectionstring, sqlAdminPassword for Bain\BainAdmin_SQL (checking the little padlock to hide the password), and webAdminPassword for Bain\Sys_Admin_Web.<br />
                                <img src="~/images/DevOps/CD/CDNewReleaseWorkflow7.png" class="DevOpsImage" /><br /><br />
                            </li>
                            <li>
                                <b>On the "General" tab</b>, specify how the email notifications should be sent, when (success/failure), and to who, usually the environment owner (also defined here). The defaults should be ok as a start.<br />
                                <img src="~/images/DevOps/CD/CDNewReleaseWorkflow8.png" class="DevOpsImage" /><br /><br />
                            </li>
                            <li>
                                <b>On the "Deployment Conditions" tab</b>, specify when the deployment for this environment is triggered. Starting with the Dev environment, set the deploy option to "After release creation", which will be trigger the release after the build completes<br />
                                <img src="~/images/DevOps/CD/CDNewReleaseWorkflow9.png" class="DevOpsImage" /><br /><br />
                            </li>
                        </ul>
                    </div>
                    <div id="vsts1" class="tab-pane fade in active">
                        <br />
                        <span style="color: red"><b>Important Note:</b></span> users have to be a member of the Release Administrators group in Azure DevOps to be able to edit and maintain releases. It is recommended to add the teams to this group to enable them to work with releases.<br />
                        <img src="~/images/DevOps/CD/CDReleasePermissions.png" class="DevOpsImage" /><br /><br />

                        In Azure DevOps, in the release section, add a new release and then choose the 'IIS Website and SQL Database Deployment' template <br />
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS1.png" class="DevOpsImage"><br /><br />

                        Rename the environment to "Dev", and rename the "New Release Definition", (usually "[app name] Release"), e.g "AppStack Release"
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS2.png" class="DevOpsImage"><br /><br />

                        Next add the relevant build artifacts, reconfigure the build source for release, clicking the add button to select a build definition
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS3.png" class="DevOpsImage"><br /><br />

                        Setup the environment to enable continuous deployment trigger for the release
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS4.png" class="DevOpsImage"><br /><br />

                        On the "Variables" tab you can configure variables that change from environment to environment (e.g, between Dev and QA).
                        Each variable is configured with the Scope, so you will need to enter each variable for each scope.
                        Then add every web.config appsettings and connectionstring variable needed to substitute for this environment.
                        This can be an extensive list for websites, depending on the number of variables.
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS6.png" class="DevOpsImage" /><br /><br />

                        There is also a useful "Grid" view that shows the variables by environment.
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS7.png" class="DevOpsImage" /><br /><br />

                        On the "Variables groups" subtab, add any variables that apply to the whole project. If there are variables or passwords that will remain constant across all environments, such as admin passwords, which can be hidden by clicking the padlock icon on the end of the textbox. <br /><br />
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS5.png" class="DevOpsImage" /><br /><br />

                        Next, on the "Tasks" tab, we can start to setup the tasks. Most of the main information is consolidated on the environment tab. This tab allows you to enter the major details for each phase.
                        <ul>
                            <li>In the Environment tab (Dev in this screenshot), you can Here you can rename the environment</li>
                            <li>In the IIS Deployment part of the environment details, the website name (Usually "Default Web Site") is confirmed</li>
                            <li>In the SQL Deployment part of the environment details, the SQL method (DacPac), SQL (Server) and Database name are entered</li>
                        </ul>
                        <img src="~/images/DevOps/CD/CDNewReleaseVSTS8.png" class="DevOpsImage" /><br /><br />

                    </div>
                </div>
                <hr />
                That is it, the release is now ready to add the customized <a href="@Url.Action("CDSetupDeploymentToIIS", "DevOps")">web</a> or <a href="@Url.Action("CDSetupDeploymentToSQL", "DevOps")">SQL</a> deployment tasks to the dev environment
                <hr />

                <a name="3" class="anchor"></a>
                <b>Further reading:</b>
                <ul>
                    <li><a href="https://www.visualstudio.com/en-us/docs/build/actions/work-with-release-definitions#create-empty" target="_blank">Creating a new Release [Microsoft.com documentation]</a></li>
                </ul>
                <hr />

                <a name="4" class="anchor"></a>
                <b>Version history:</b>
                <ul>
                    <li>20-Sep-2018: Content updated to replace most references of VSTS with Azure DevOps to match rebranding</li>
                    <li>23-Sep-2017: Updated to handle new Azure DevOps UI and workflow</li>
                    <li>16-Jun-2017: Initial release of DevOps content</li>
                </ul>
            </div>
        </div>
    </div>
</div>