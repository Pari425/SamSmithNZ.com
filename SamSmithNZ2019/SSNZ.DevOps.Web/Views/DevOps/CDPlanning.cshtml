@using SSNZ.DevOps.Web.Models
@{
    ViewBag.Title = "Planning for DevOps";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12">
        <ul class="breadcrumb">
            <li>@Html.ActionLink("Home", "Index", "Home")</li>
            <li>@Html.ActionLink("DevOps", "Index", "DevOps")</li>
            <li class="active">@ViewBag.Title</li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">
                    @ViewBag.Title
                </h3>
            </div>
            <div class="panel-body">
                @Html.Partial("PartialViews/_DevOpsMenu", new DevOpsMenu2ViewModel(null, null, null, new DevOpsMenuViewModel(false, true, false, false, false, false, false, false), null))
                <hr />

                <b>DevOps requires some planning, to fully understand the process being automated, and the infrastructure needed to achieve these goals.</b> Once the code is built, the software is deployed to each successive environment, reconfiguring where necessary. This gives confidence at each step that the code is of a high quality and can be deployed without issue. <br />
                <img src="~/images/DevOps/CD/Planning.png" class="DevOpsImage" /><br /><hr /><br />

                <b>Simple DevOps implementations should have at least 2-3 environments</b>. Examples of simple implementations include SSO, small website projects<br />
                <ul>
                    <li><b>Development/Integration:</b> Where the developers code and test their projects. When the code is checked in, it is merged and deployed to this environment. When there are only one or two developers, Integration and Development can be the same server.</li>
                    <li><b>QA:</b>: For QA team members and customers to test and verify the requirements have been implemented correctly</li>
                    <li><b>Production:</b> For the final end users. </li>
                </ul>
                <img src="~/images/DevOps/CD/PlanningSimple.png" /><br /><br /><br />

                <b>Complex DevOps implementations should have 4-5 environments</b><br />
                <ul>
                    <li><b>Integration:</b> Primarily owned by the continuous integration process, where the code is checked in, is merged and deployed to this environment. As check ins can happen constantly, especially in larger teams, this environment is not ever physically accessed, it's just used by the build and release process to build, test, deploy and verify that everything worked ok, before promoting this build to development. Most of this document refers to "Dev" environments, this includes integration for these more complex situations.</li>
                    <li><b>Development:</b> Where the developers code and test their projects. This promotion is tricky, and will need some tweaking. After the Integration build is done, it is promoted here. This does require some coordination to ensure that a developer does not lose work in progress in the database. Developers should ensure all of there work is in Visual Studio and saved at all times. As most developers have a local web server and Visual Studio, a web server is not (usually) useful.</li>
                    <li><b>QA:</b> For QA team members and customers to test and verify the requirements have been implemented correctly.</li>
                    <li><b>Stage/Demo/UAT:</b> For final verification before deploying to production. This is an optional stage depending on the needs of the customer.</li>
                    <li><b>Production:</b> For the final end users.</li>
                </ul>
                <img src="~/images/DevOps/CD/PlanningComplex.png" class="DevOpsImage" /><br /><br />

                @*<b>DevOps is typically broken into two phases:</b>
                    <ul>
                        <li>@Html.ActionLink("Continuous Integration (or CI)", "CI", "DevOps"): All code is automatically merged, built, and tested to ensure quality, before a final "build artifacts", a series of outputs (files), that are required to run the application. This is left, dark green side of the helix image above.</li>
                        <li>@Html.ActionLink("Continuous Delivery (or CD)", "CD", "DevOps"): The build artifacts from the CI step are deployed to successive environments (usually Dev->QA->Production). This is right, light green side of the helix image above.</li>
                    </ul>
                    At a high level, a solution goes through the following workflow as part of the development, testing and deployment process. Only a few builds are deployed to a staging or QA environment, and only a few of these are deployed to production.
                    <img src="~/images/DevOps/DeploymentToEachEnvironmentWorkflow.png" /><br /><br />*@
                <hr />

                <b>Further Reading:</b>
                <ul>
                    <li>Planning for DevOps</li>
                </ul>
                <hr />

                <b>Version history:</b>
                <ul>
                    <li>16-Jun-2017: Initial release of DevOps content</li>
                </ul>
            </div>
        </div>
    </div>
</div>
