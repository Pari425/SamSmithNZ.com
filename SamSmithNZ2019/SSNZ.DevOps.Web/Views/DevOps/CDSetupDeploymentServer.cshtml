@using SSNZ.DevOps.Web.Models
@{
    ViewBag.Title = "Setup a server to receive deployments";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md-12">
        <ul class="breadcrumb">
            <li>@Html.ActionLink("Home", "Index", "Home")</li>
            <li>@Html.ActionLink("DevOps", "Index", "DevOps")</li>
            <li class="active">@ViewBag.Title</li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">
                    @ViewBag.Title
                </h3>
            </div>
            <div class="panel-body">
                @Html.Partial("PartialViews/_DevOpsMenu", new DevOpsMenu2ViewModel(null, null, null, new DevOpsMenuViewModel(false, false, false, true, false, false, false, false), null))
                <hr />

                <span class="DevOpsTFSWarning">Note that this page contains both TFS 2015 and Azure DevOps content. Use the tabs below to show the relevant content</span><br />


                <a name="1" class="anchor"></a>
                <h3>Overview</h3>
                <b>Before a deployment can start, the target server needs to be enabled so that it can receive commands remotely.</b> These remote commands are what can be used to copy files and configure the server as part of the deployment
                <hr />


                <a name="2" class="anchor"></a>
                <h3>How to setup</h3>
                <a name="2_1" class="anchor"></a>
                <b>Step 1: Setup PowerShell on the server</b><br />
                PowerShell first needs to be setup on the server. Note that PowerShell version 3 or higher is required for Azure DevOps deployments, and PowerShell version 2 or higher is required for TFS 2015 deployments. PowerShell version 3 can be installed through the "Windows Management Framework 3.0" (See the download link below in references)).
                To discover the version of PowerShell installed, open a PowerShell window and run:<br />

                <div class="codeHeader lang-html" data-bi-name="code-header">
                    <span class="language">PowerShell</span>
                    <button class="action" data-bi-name="copy" onclick="selectElementContentsById('txtPowerShellVersion')"><svg class="vector-icon" focusable="false" viewBox="0 0 14 14"><path d="M13 6.8V14H4v-3H0V0h5.2l3 3h1L13 6.8zM4 3h2.8l-2-2H1v9h3V3zm8 5H8V4H5v9h7V8zM9 7h2.8L9 4.2V7z"></path></svg> Copy</button>
                </div>
                <pre id="txtPowerShellVersion">$PSVersionTable.PSVersion</pre><br />

                To allow PowerShell to run remotely on a server, a requirement for most forms of deployment, open a PowerShell window with "Run as administrator", and then run the script below. It should prompt for confirmation of the Execution policy change, confirm "yes".
                <div class="codeHeader lang-html" data-bi-name="code-header">
                    <span class="language">PowerShell</span>
                    <button class="action" data-bi-name="copy" onclick="selectElementContentsById('txtServerSetup')"><svg class="vector-icon" focusable="false" viewBox="0 0 14 14"><path d="M13 6.8V14H4v-3H0V0h5.2l3 3h1L13 6.8zM4 3h2.8l-2-2H1v9h3V3zm8 5H8V4H5v9h7V8zM9 7h2.8L9 4.2V7z"></path></svg> Copy</button>
                </div>
                <pre id="txtServerSetup">Set-ExecutionPolicy RemoteSigned</pre><br />

                <b>Troubleshooting PowerShell</b><br />
                If the 'Set-ExecutionPolicy' PowerShell script is not run as an Administrator, the following message may display. To resolve, open a new PowerShell window, running as an Administrator, (right click, Run As Administrator):
                <pre>Set-ExecutionPolicy : Access to the registry key 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell' is denied. At line:1 char:20</pre><br />

                If the 'Set-ExecutionPolicy' PowerShell script is not run, the following message may display when deploying. To resolve, just run the script above:
                <pre>Deployment failed on machine NDLPETSSQLDEV1v.bain.com with following message : System.Management.Automation.Remoting.PSRemotingTransportException: Connecting to remote server [Server].bain.com failed with the following error message. </pre><br />

                <a name="2_2" class="anchor"></a>
                <b>Step 2: Setup WinRM on the server</b><br />
                WinRM is a package that allows us to remotely run management scripts and needs to be configured. Open a PowerShell window with "Run as administrator", and then run the script below. Essentially, WinRM wraps up some prewritten PowerShell scripts to deploy items easily. WinRM needs the firewall ports 5985 and 5986 to be open to configure, but these should already be open on Bain machines. <i>#WorkInProgress</i> <img src="~/images/DevOps/WorkInProgress.png" class="DevOpsWorkInProgress" title="These ports may not be open by default in VM's hosted in the IaaS cloud'" />
                <div class="codeHeader lang-html" data-bi-name="code-header">
                    <span class="language">PowerShell</span>
                    <button class="action" data-bi-name="copy" onclick="selectElementContentsById('txtWinRMSetup')"><svg class="vector-icon" focusable="false" viewBox="0 0 14 14"><path d="M13 6.8V14H4v-3H0V0h5.2l3 3h1L13 6.8zM4 3h2.8l-2-2H1v9h3V3zm8 5H8V4H5v9h7V8zM9 7h2.8L9 4.2V7z"></path></svg> Copy</button>
                </div>
                <pre id="txtWinRMSetup">winrm quickconfig</pre><br />

                <a name="2_1" class="anchor"></a>
                <b>Step 3: Server requirements</b><br />
                Note that Azure DevOps deployment servers <i>may</i> require .NET 4.5 or greater to be installed <i>#WorkInProgress</i> <img src="~/images/DevOps/WorkInProgress.png" class="DevOpsWorkInProgress" title="This needs to be confirmed, as there have been inconsistent results to date" />
                System Requirements: Windows Server 2008 R2 SP1 (This will not work on Windows 2008)
                <hr />

                <a name="3" class="anchor"></a>
                <h3>TFS 2015/ Azure DevOps specific setups </h3>
                <ul class="nav nav-tabs">
                    <li><a data-toggle="tab" href="#tfs1">TFS 2015</a></li>
                    <li class="active"><a data-toggle="tab" href="#vsts1">Azure DevOps</a></li>
                </ul>

                <div class="tab-content">
                    <br />

                    <div id="tfs1" class="tab-pane fade">
                        TFS 2015 does not need any additional steps to setup a server on premise, as everything is already behind the firewall with the TFS 2015 server<br />
                    </div>
                    <div id="vsts1" class="tab-pane fade in active">

                        <b>Azure DevOps uses deployment groups to setup its target deployment servers. A deployment group is a logical set of deployment target machines that have agents installed on each one. Deployment groups represent the physical environments; for example, "Dev", "Test", "UAT", and "Production". In effect, a deployment group is just another grouping of agents, much like an agent pool.</b><br /><br />


                        In the "Deployment Groups" section of the team project in Azure DevOps, Add a new deployment group ('Dev', 'QA', 'Production')<br />

                        <img src="~/images/DevOps/CD/CDDeploymentSetupVSTSDeploymentGroup1.png" class="DevOpsImage" /><br /><br />



                        Click on this deployment group name, and in the register machine section, copy the PowerShell registration script to the target server.<br />

                        <img src="~/images/DevOps/CD/CDDeploymentSetupVSTSDeploymentGroup2.png" class="DevOpsImage" /><br /><br />



                        On the target server, open a PowerShell window with administrator rights and paste in the PowerShell script to run it. It can sometimes take a minute to return a prompt. If the error "Cannot add type. The assembly 'System.IO.Compression.FileSystem' could not be found" is shown, then the wrong PowerShell version is installed, see <a href="#1">step 1</a> above to resolve.<br />

                        <img src="~/images/DevOps/CD/CDDeploymentSetupVSTSDeploymentGroup3.png" class="DevOpsImage" /><br /><br />



                        It will then prompt for the "authentication type (press enter for PAT)" - just press enter to use PAT, and then prompt for the personal access token. Use this token (see the external reference below on how to generate a new personal access token):
                        <div class="codeHeader lang-html" data-bi-name="code-header">
                            <span class="language">Personal access token (Note that this code expires 10-Nov-2018)</span>
                            <button class="action" data-bi-name="copy" onclick="selectElementContentsById('txtPersonalAccessToken')"><svg class="vector-icon" focusable="false" viewBox="0 0 14 14"><path d="M13 6.8V14H4v-3H0V0h5.2l3 3h1L13 6.8zM4 3h2.8l-2-2H1v9h3V3zm8 5H8V4H5v9h7V8zM9 7h2.8L9 4.2V7z"></path></svg> Copy</button>
                        </div>
                        <pre id="txtPersonalAccessToken">uibojq2kw3aiiw6zqvc6tmzdf4zwcybc6foymlmb2ipwu7tzu34a</pre><br />



                        Next, it will prompt for deployment group tags, press enter to skip this.
                        <ul>
                            <li>If this is a web server, press enter again on the next prompt to default the user to "NT Authority\System"</li>
                            <li>If this is a sql server, on the next prompt add the user "bain\bainadmin_sql" and enter the correct password</li>
                        </ul>
                        It should end with a message that the service started successfully.<br /><br />

                        <img src="~/images/DevOps/CD/CDDeploymentSetupVSTSDeploymentGroup5.png" class="DevOpsImage" /><br /><br />



                        Now on the Machines tab of Deployment Groups, it should show the server that was just added, with a green bar to the left of it. If the bar to the left is still red, then something did not work. <br />

                        <img src="~/images/DevOps/CD/CDDeploymentSetupVSTSDeploymentGroup6.png" class="DevOpsImage" /><br /><br />



                        Click on it and add a tag ('Web', 'SQL', etc.) This will help us later to deploy, and enables the capability to deploy to this server. For example: "Deploy web package to all Web servers in the Dev deployment group", helping to make load balancing a breeze. In the example below, for the server WTREXPSQLDEV1V, it's been tagged with SQL, to indicate it's a database server.<br />

                        <img src="~/images/DevOps/CD/CDDeploymentSetupVSTSDeploymentGroup4.png" class="DevOpsImage" /><br /><br />

                        <b>In some situations, deployment groups can be shared across multiple projects - for example, applications on the intranet server.</b> In this case we can share deployment groups across team projects. See this link for more details: <a href="https://blogs.msdn.microsoft.com/devops/2018/01/11/sharing-of-deployment-groups-across-projects/#comment-224735">Sharing of Deployment Groups across projects</a>.<br /><br />

                        Note that the service installed is named "VSTS Agent" (This is likely to change to "Azure DevOps Agent" at some point in the near future). If the deployment group goes offline you can check the service specifically, or run the steps above to reinstall it again<br />
                        <img src="~/images/DevOps/CD/CDVSTSAgent.png" class="DevOpsImage" /><br /><br />

                    </div>
                </div>
                <hr />


                <a name="4" class="anchor"></a>
                <b>Further reading:</b>
                <ul>
                    <li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=34595" target="_blank">Windows Management Framework 3.0 download (for PowerShell 3.0) [Microsoft Download]</a></li>
                    <li><a href="https://www.visualstudio.com/en-us/docs/setup-admin/team-services/use-personal-access-tokens-to-authenticate" target="_blank">Creating Personal Access tokens to authenticate on premise build servers for Azure DevOps [Microsoft Documentation]</a></li>
                    <li><a href="https://blogs.msdn.microsoft.com/devops/2018/01/11/sharing-of-deployment-groups-across-projects/#comment-224735">Sharing deployment groups across projects (Microsoft blog post)</a></li>
                </ul>
                <hr />


                <a name="5" class="anchor"></a>
                <b>Version history:</b>
                <ul>
                    <li>20-Sep-2018: Content updated to replace most references of VSTS with Azure DevOps to match rebranding</li>
                    <li>17-Aug-2018: Added notes about the Azure DevOps agent service created</li>
                    <li>11-Jan-2018: Added notes about shared Deployment Groups
                    <li>06-Jul-2017: Update to include new Personal Token after network logon updates invalidated the old code</li>
                    <li>16-Jun-2017: Initial release of DevOps content</li>
                </ul>
            </div>
        </div>
    </div>
</div>
