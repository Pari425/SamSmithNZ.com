name: 'CI/CD'

on:
  push:
    branches:
    - main
  pull_request:
env:
  dotNetVersion: net5.0
  dotNetConfiguration: Release
  runtimeTarget: win-x64
jobs:

  build:
    name: Build .NET 5 projects
    runs-on: windows-latest
    outputs: # https://stackoverflow.com/questions/59175332/using-output-from-a-previous-job-in-a-new-one-in-a-github-action
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}  
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
        
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
        
    #- uses: microsoft/setup-msbuild@v1.0.2
    - name: Install .Net 5 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    - name: Publish dotnet 5 web projects
      run: |
        dotnet nuget add source "https://nuget.pkg.github.com/SamSmithNZ-dotcom/index.json" --name "githubfeed" --username "samsmithnz@gmail.com" --password "${{ secrets.GITHUB_TOKEN }}"
        dotnet restore SamSmithNZ/SamSmithNZ.Service/SamSmithNZ.Service.csproj
        dotnet publish SamSmithNZ/SamSmithNZ.Service/SamSmithNZ.Service.csproj --configuration ${{ env.dotNetConfiguration }} --output ${{ github.workspace }}/service -p:Version='${{ steps.gitversion.outputs.SemVer }}' #--runtime ${{env.runtimeTarget}} 
        dotnet publish SamSmithNZ/SamSmithNZ.Web/SamSmithNZ.Web.csproj --configuration ${{ env.dotNetConfiguration }} --output ${{ github.workspace }}/web -p:Version='${{ steps.gitversion.outputs.SemVer }}' #--runtime ${{env.runtimeTarget}} 
   # - name: Build utility dotnet 5 projects
   #   run: |
   #     dotnet build SamSmithNZ/SamSmithNZ.WorldCupGoals.WPF/SamSmithNZ.WorldCupGoals.WPF.csproj --configuration Release --output ${{ github.workspace }} --runtime win-x64
   #     dotnet build SamSmithNZ/SamSmithNZ.FFLSetlistScraper.WinForms/SamSmithNZ.FFLSetlistScraper.WinForms.csproj --configuration Release --output ${{ github.workspace }} --runtime win-x64

    #functional tests
    - name: Publish .NET 5 functional tests project
      run: dotnet publish SamSmithNZ/SamSmithNZ.FunctionalTests/SamSmithNZ.FunctionalTests.csproj --configuration Release --output ${{ github.workspace }}/FunctionalTests --runtime win-x64
    - name: 'Copy Selenium Files to: ${{ github.workspace }}/FunctionalTests/SamSmithNZ.FunctionalTests'
      run: Copy 'SamSmithNZ/SamSmithNZ.FunctionalTests/bin/Release/net5.0/*chromedriver.exe*' '${{ github.workspace }}/FunctionalTests/SamSmithNZ.FunctionalTests'
    #Publish all artifacts
    - name: Publish webapi Artifact
      uses: actions/upload-artifact@v2
      with:
        name: service
        path: ${{ github.workspace }}/service
    - name: Publish web Artifact
      uses: actions/upload-artifact@v2
      with:
        name: web
        path: ${{ github.workspace }}/web
    - name: Publish web Artifact
      uses: actions/upload-artifact@v2
      with:
        name: functionalTests
        path: ${{ github.workspace }}/FunctionalTests
  
  buildDatabase:
    name: Build database
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download the build artifacts
      uses: actions/download-artifact@v2
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build database project
      run: msbuild 'SamSmithNZ/SamSmithNZ.Database/SamSmithNZ.Database.sqlproj' /p:configuration='Release' /p:platform='Any CPU'
    - name: 'Copy database files to: ${{ github.workspace }}'
      run: |
        dir ${{ github.workspace }}\SamSmithNZ\SamSmithNZ.Database\bin\Output /s
        copy '${{ github.workspace }}\SamSmithNZ\SamSmithNZ.Database\bin\Output\*.*' '${{ github.workspace }}/Database'
        REM dir ${{ github.workspace }}/Database /s
        dir ${{ github.workspace }} /s
    - name: Publish database objects
      uses: actions/upload-artifact@v2
      with:
        name: database
        path: ${{ github.workspace }}/Database

  testDotNet:
    name: Test .NET
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Install .Net 5 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    - name: Variable Substitution appsettings file for tests
      uses: microsoft/variable-substitution@v1
      with:
        files: 'SamSmithNZ/SamSmithNZ.Tests/appsettings.json'
      env:
        ConnectionStrings.DefaultConnectionString: "${{ secrets.SQL_CONNECTIONSTRING }}"
        CacheConnection: "${{ secrets.REDIS_CONNECTIONSTRING }}"  
    - name: Test dotnet 5 projects
      run: |
        dotnet nuget add source "https://nuget.pkg.github.com/SamSmithNZ-dotcom/index.json" --name "githubfeed" --username "samsmithnz@gmail.com" --password "${{ secrets.GITHUB_TOKEN }}"
        dotnet restore SamSmithNZ/SamSmithNZ.Tests/SamSmithNZ.Tests.csproj
        dotnet test SamSmithNZ/SamSmithNZ.Tests/SamSmithNZ.Tests.csproj --configuration debug--nologo -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=lcov 
    - run: |
        Get-Childitem –Path ${{ github.workspace }} -Include *coverage.info* -File -Recurse -ErrorAction SilentlyContinue  
        Get-Childitem –Path ${{ github.workspace }} -Include *soccer.jpg* -File -Recurse -ErrorAction SilentlyContinue  
    - name: Publish coverage report to coveralls.io
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: SamSmithNZ/SamSmithNZ.Tests/TestResults/coverage.info  

  sonarCloud:
    name: SonarCloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"samsmithnz_SamSmithNZ.com" /o:"samsmithnz-github" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet nuget add source "https://nuget.pkg.github.com/SamSmithNZ-dotcom/index.json" --name "githubfeed" --username "samsmithnz@gmail.com" --password "${{ secrets.GITHUB_TOKEN }}"
          dotnet restore SamSmithNZ/SamSmithNZ.Service/SamSmithNZ.Service.csproj
          dotnet build SamSmithNZ/SamSmithNZ.Service/SamSmithNZ.Service.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
     
  deployWebAppsToSlots:
    name: Deploy web apps
    runs-on: ubuntu-latest
    needs:
    - build
    - buildDatabase
    - testDotNet
    - sonarCloud
    steps:
    - uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.ORG_AZURE_SP }}
    - name: Download the build artifacts
      uses: actions/download-artifact@v2
    #- name: Deploy infrastructure with ARM templates
    #  uses: azure/cli@v1.0.0
    #  with:
    #    inlineScript: EnvironmentARMTemplate\PowerShell\DeployInfrastructureWebService.ps1 -appPrefix "samsapp" -environment "prod" -webAppEnvironment "prod" -resourceGroupName "SamSmithNZ.com" -resourceGroupLocation "East US" -resourceGroupLocationShort "eu" -dataKeyVaultName "tbd" -templatesLocation "${{ github.workspace }}\drop\EnvironmentARMTemplate\Templates" -sqlDatabaseName "ssnzdb" -sqlAdministratorLoginUser "" -sqlAdministratorLoginPassword ""
    #    azcliversion: latest
    - name: 'App Service Deploy: SamSmithNZ web service'
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ssnz-prod-eu-service
        package: service
        slot-name: production #staging
    - name: Set service secrets #--slot staging 
      run: az webapp config appsettings set --name "ssnz-prod-eu-service" --resource-group "SamSmithNZ.com" --settings "ConnectionStrings:DefaultConnectionString=${{ secrets.SQL_CONNECTIONSTRING }}" "CacheConnection=${{ secrets.REDIS_CONNECTIONSTRING }}"
    - name: 'App Service Deploy: SamSmithNZ website'
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ssnz-prod-eu-web
        package: web
        slot-name: production #staging
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.build.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: github.ref == 'refs/heads/main' && needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ needs.build.outputs.Version }}
        release_name: Release ${{ needs.build.outputs.Version }}
        
  deploySQLDB:
    name: Deploy SQL database
    runs-on: windows-latest
    needs:
    - build
    - buildDatabase
    - testDotNet
    - sonarCloud
    steps:
    - uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.DB_AZURE_SP }}
    - name: Download the build artifacts
      uses: actions/download-artifact@v2
    - name: Azure SQL dacpac publish
      uses: azure/sql-action@v1
      with:
        server-name: ssnzdbserver.database.windows.net
        connection-string: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
        dacpac-package: Database/SamSmithNZ.Database.dacpac
        arguments: /p:BlockOnPossibleDataLoss=true
        
  runSmokeTests:
    name: Run smoke tests on slots
    runs-on: windows-latest
    needs:
    - deployWebAppsToSlots
    - deploySQLDB
    steps:
    - uses: actions/checkout@v2
    - name: Download the build artifacts
      uses: actions/download-artifact@v2
      with:
        name: functionalTests
        path: ${{ github.workspace }}
    - name: Install .Net 5 SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    - name: Run functional smoke tests on website and web service
      run: |
        $vsTestConsoleExe = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"
        $targetTestDll = "**\SamSmithNZ.FunctionalTests.dll"
        $testRunSettings = "/Settings:`"test.runsettings`" "
        #$parameters = " -- ServiceUrl=""https://ssnz-prod-eu-service-staging.azurewebsites.net/"" WebsiteUrl=""https://www.samsmithnz.com/"" "
        $parameters = " -- ServiceUrl=""https://ssnz-prod-eu-service.azurewebsites.net/"" WebsiteUrl=""https://www.samsmithnz.com/"" "
        #Note that the `" is an escape character to quote strings, and the `& is needed to start the command
        $command = "`& `"$vsTestConsoleExe`" `"$targetTestDll`" $testRunSettings $parameters "
        Write-Host "$command"
        Invoke-Expression $command
      shell: powershell
      
  swapStagingSlotsToProd:
    name: Swap staging slots to prod
    runs-on: ubuntu-latest
    if: 0 == 1
    #if: github.ref == 'refs/heads/main'
    needs:
    - runSmokeTests
    steps:
    - uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.ORG_AZURE_SP }}
    - name: 'Swap Slots: web service'
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az webapp deployment slot swap --resource-group SamSmithNZ.com --name ssnz-prod-eu-service --slot staging --target-slot production
    - name: 'Swap Slots: web'
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az webapp deployment slot swap --resource-group SamSmithNZ.com --name ssnz-prod-eu-web --slot staging --target-slot production
                    
